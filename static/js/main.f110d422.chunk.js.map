{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Spinner/Spinner.js","components/Button/Button.js","components/Modal/Modal.js","services/imageApi.js","App.js","index.js"],"names":["Searchbar","state","inputValue","handleChange","evt","value","target","setState","handleSubmit","onSubmit","props","preventDefault","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","webformatURL","id","openModal","largeImageURL","src","alt","onClick","ImageGallery","map","item","Spinner","color","height","width","Button","loadMore","Modal","removeListener","key","onClose","window","addEventListener","removeEventListener","url","getFetch","query","page","axios","get","then","response","data","hits","App","images","isLoading","componentDidUpdate","prevProps","prevState","fetchImages","scrollTo","top","document","documentElement","scrollHeight","behavior","getQuery","imageApi","length","prev","catch","error","console","log","closeModal","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f110d422.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Searchbar extends Component {\r\n  state = {\r\n    inputValue: \"\",\r\n  };\r\n\r\n  handleChange = (evt) => {\r\n    const { value } = evt.target;\r\n    this.setState({ inputValue: value });\r\n  };\r\n\r\n  handleSubmit = (evt) => {\r\n    const { onSubmit } = this.props;\r\n    const { inputValue } = this.state;\r\n    evt.preventDefault();\r\n    onSubmit(inputValue);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ImageGalleryItem({ webformatURL, id, type, openModal, largeImageURL }) {\r\n  return (\r\n    <li key={id} className=\"ImageGalleryItem\">\r\n      <img src={webformatURL} alt={type} onClick={() => openModal(largeImageURL)} />\r\n    </li>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  webformatURL: PropTypes.string,\r\n  id: PropTypes.number,\r\n  largeImageURL: PropTypes.string,\r\n  type: PropTypes.string,\r\n  openModal: PropTypes.func,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ImageGalleryItem from \"../ImageGalleryItem/ImageGalleryItem\";\r\n\r\nfunction ImageGallery({ props, openModal }) {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {props.map((item) => {\r\n        return (\r\n          <ImageGalleryItem\r\n            id={item.id}\r\n            webformatURL={item.webformatURL}\r\n            largeImageURL={item.largeImageURL}\r\n            type={item.type}\r\n            openModal={openModal}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  props: PropTypes.array,\r\n  openModal: PropTypes.func,\r\n};\r\n \r\nexport default ImageGallery;\r\n","import { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nclass Spinner extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Loader type=\"ThreeDots\" color=\"#3f51b5\" height=\"80\" width=\"80\" className=\"loader\" />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <button type=\"button\" className=\"Button\" onClick={this.props.loadMore}>\r\n          Load More\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  loadMore: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", (evt) => {\r\n      if (evt.key === \"Escape\") {\r\n        this.props.onClose();\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.removeListener);\r\n  }\r\n\r\n  removeListener = (evt) => {\r\n    if (evt.key === \"Escape\") {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { url } = this.props;\r\n    return (\r\n      <div className=\"Overlay\">\r\n        <div className=\"Modal\">\r\n          <img src={url} alt=\"largeImage\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nModal.propTypes = {\r\n  url: PropTypes.string,\r\n  onClose: PropTypes.func,\r\n};\r\n\r\nexport default Modal;\r\n","import axios from \"axios\";\r\n\r\nfunction getFetch(query, page) {\r\n  let key = `18650821-54d383092d5458c2872240bef`;\r\n  let perPage = 12;\r\n  let url = `https://pixabay.com/api/?q=${query}&page=${page}&key=${key}&image_type=photo&orientation=horizontal&per_page=${perPage}`;\r\n\r\n  return axios.get(url).then((response) => {\r\n    return response.data.hits;\r\n  });\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getFetch };\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Searchbar from \"./components/Searchbar/Searchbar\";\nimport ImageGallery from \"./components/ImageGallery/ImageGallery\";\nimport Spinner from \"./components/Spinner/Spinner\";\nimport Button from \"./components/Button/Button\";\nimport Modal from \"./components/Modal/Modal\";\nimport imageApi from \"./services/imageApi\";\n\nclass App extends Component {\n  state = {\n    query: \"\",\n    page: 1,\n    images: [],\n    isLoading: false,\n    largeImageURL: null,\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    const { page, query } = this.state;\n    if (prevState.query !== query) {\n      this.fetchImages();\n    }\n\n    if (page !== prevState.page) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: \"smooth\",\n      });\n    }\n  };\n\n  getQuery = (value) => {\n    this.setState({ query: value, page: 1, images: [] });\n  };\n\n  fetchImages = () => {\n    const { query, page } = this.state;\n    this.setState({ isLoading: true });\n    imageApi\n      .getFetch(query, page)\n      .then((data) => {\n        if (data.length > 0) {\n          this.setState((prev) => ({\n            isLoading: false,\n            images: [...prev.images, ...data],\n            page: prev.page + 1,\n          }));\n        }\n      })\n      .catch((error) => console.log(error));\n  };\n\n  openModal = (url) => {\n    this.setState({ largeImageURL: url });\n  };\n\n  closeModal = () => {\n    this.setState({ largeImageURL: null });\n  };\n\n  render() {\n    const { isLoading, images, largeImageURL } = this.state;\n    return (\n      <>\n        <Searchbar onSubmit={this.getQuery} />\n        <ImageGallery props={images} openModal={this.openModal} />\n        {isLoading && <Spinner />}\n        {images.length > 0 && <Button loadMore={this.fetchImages} />}\n        {largeImageURL && <Modal url={largeImageURL} onClose={this.closeModal} />}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}